How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    you are able to see the difference between 2 versions at a much faster rate,
    if you consider these versions could have 1000s lines of code. So, this
    procedure allows you to see your "bug" at a faster rate, allowing you
    to solve the issue much faster, and move on with your work.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    again, you have access to previous versions, so you can change and modify
    and combine existing code or ideas with pervious code & approaches from
    those previous versions of the file. Or you can use previous versions to
    branch out and try a different experimental approach to the your current
    version/method of the file.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    pros: better probability of choosing to create after a logical change.
    also, better chance that the number of versions are kept to a reasonable
    number, so as not to cause confusion or unreadability.
    cons of google docs: saves automatically, the saves could be meaningless.
    leads to confusion and or unreadability. It could take ages to find a mistake
    or change code, because it'll take forever to find the version you need.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    because in Git, these files could be related and needed for the purpose you're
    trying to achieve. Google docs treats each file separately, because it is not
    a code version control system. So, if you have a html, css and Js file, then
    Git will save these files in one commit, because they are needed together in
    order to function properly. uhhh, does that make sense?

How can you use the commands git log and git diff to view the history of files?

  git log: you see the history of the repository, or all the commits associated
  with the repo.you can see each commit Id, and its associated message to
  determine who, when, and what was done on each commit.
  git diff: compares 2 commits using their respective id that comes from the
  git log. git diff is useful to compare what was added/deleted in a single
  commit when compared to the previous one. you can access quite quickly and easily,
  any changes that were made in the code, and try to find your mistake and so
  on. It surely would make life much easier when you are dealing with a
  big project that involves a team. Even if you want to break up your personal
  project into manageable steps, this can be useful as well.

How might using version control make you more confident to make changes that
could break something?

    using version control, you can restore previous versions of your code. So,
    if you want to experiment or go and try something new and crazy, you can do
    that with the comfort in knowing that your experiment can fail.
    So, you can take your website and try several different approaches knowing
    that you can always go back and restore the previous version which worked
    better. THIS ALLOWS FOR EXPLORATION AT A DEEP,DEEP LEVEL.

Now that you have your workspace set up, what do you want to try using Git for?

    I think git would be great to contribute to open source projects, to get more
    experience. But, in the short term, I could use Git to help with developing,
    modifying, experimenting, and improving Udacity projects. I think it will
    be a great tool, and make it easier for me to organize what is going on with
    my code. If I practice now, then it'll only benefit me when I'm working
    on a big project with many people in a formal job setting.
